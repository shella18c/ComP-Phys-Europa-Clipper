GlowScript 2.7 VPython

#########################################################################
#                                                                       #
#   Authors:  Stephen Schmidt, Alex Mcevoy, Chris Moncla, Chris Shella  #
#    Class:  PH412, Spring, 2018                                        #
#  Helpers:  Mr. Kitchen                                                #
#                                                                       #
#  Program:  Europa Clipper Model                                       #
# Due Date:  May 18, 2018                                               #
#                                                                       #
# Language:  Glowscript                                                 #
#      IDE:  Glowscript                                                 #
#                                                                       #
#  Purpose:  Model a hypothetical path for NASA's Europa Clipper probe  #
#                                                                       #
#########################################################################

#Solar System Model
#Adapted from the travelling to Mars assignment

#These are the initial conditions. You should modify the launchday and direction of v
#You can also modify the jupitersrocketdist to adjust what is considered a "success" in reaching Mars
launchday=200 #day to launch
rinitial=5.6*6.4e6 #initial distance of rocket from center of earth
jupiterrocketdist=800*6.4e6 #distance from jupiter considered a success
vinitial=10282 #initial speed of rocket
v = vinitial*norm(vec(10,-3,0)) #initial velocity of rocket; change the direction only

#pos unit is m
#time unit is s

#pos and vel generated by http://ssd.jpl.nasa.gov/horizons.cgi

#Expected launch date: November 24, 2021

#no z components

jupiter_distance_from_sun = 778.5e9
jupiter_phase_angle = 11.2887

jupiterpos=1000*vec(6.794641004534719E+08 ,-3.095211220368358E+08,0)
jupitervel=1000*vec(5.258562961954226E+00,1.250573240287679E+01,0)
earthpos=1000*vec(6.895232097865719E+07,1.304972824047199E+08 ,0)
earthvel=1000*vec(-2.668795410599117E+01,1.403825976547256E+01,0)

#constants

AU=1000*149597871 #AU in m
G=6.67384e-11

#diameters used for drawing sun, jupiter, and earth; diameters are not to scale
Dsun=0.2*AU
Dearth=0.1*AU
Djupiter=0.4*AU

#mass
Msun=1.989e30
Mearth=5.97219e24
Mjupiter=6.4185e23
Mrocket=1e4

#time
day=24*3600
dt=2*3600
t=0

#set up 3D scene
scene = display(width=430, height=400, userspin=True, userzoom=True)
scene.append_to_title("""<br>Click the simulation to begin.""")
scene.append_to_title("""<br><br>Assumptions include:""")
scene.append_to_title("""<br>1. The rocket's speed near Earth's surface is 12 km/s, relative to Earth.""")
scene.append_to_title("""<br>2. The velocity of the rocket at an altitude of 2 earth radii is 5 km/s in the direction shown by the arrow.""")
scene.append_to_title("""<br>3. The thrusters are off during the entire transfer. The net force on the rocket is the gravitational force by the Sun, Earth, and Jupiter.<br><br>""")

#scales for arrows
scale1=Dsun

# set up 3D objects
sun=sphere(dispay=scene, pos=vec(0,0,0), radius=Dsun/2, color=color.yellow)
jupiter=sphere(dispay=scene, pos=jupiterpos, radius=Djupiter/2, color=color.red)
earth=sphere(dispay=scene, pos=earthpos, radius=Dearth/2, color=color.blue)
rocket=sphere( pos=earth.pos+rinitial*norm(v), radius=earth.radius/2, color=color.orange)
rocketarrow1=arrow(dispay=scene, pos=earth.pos, axis=scale1*norm(v), color=color.white)

# create trails
jupitertrail=attach_trail(jupiter, radius=0.2*Djupiter, trail_type="points", interval=2, retain=1000)
earthtrail=attach_trail(earth, radius=0.2*Dearth, trail_type="points", interval=2, retain=1000)
rockettrail=attach_trail(rocket, radius=0.2*rocket.radius, trail_type="points", interval=2, retain=1000)
rockettrail.stop

#create strings and labels
tstr="Time: {:.0f} days".format(0)
tlabel=label(pos=vector(0,1.2*mag(jupiterpos),0), text=tstr)
launchstr="Launch Date: November 24, 2021. \n"+launchday+" days until launch. \n Click to Run."
launchlabel=label(pos=vector(0,-1.2*mag(jupiterpos),0), text=launchstr)

#set the range
scene.range=1.5*mag(jupiterpos)

#this function is called when the rocket is launched
# it sets booleans and sets the initial velocitiy and momentum of the rocket
def launchRocket():
    global vrocket, procket, rocketLaunched, justNowLaunched
    rocketLaunched=True
    justNowLaunched=True
    vrocket=vearth+v
    procket=Mrocket*vrocket

# initial positions, velocities, and momenta of all objects
earth.pos=earthpos
rocket.pos=earthpos
jupiter.pos=jupiterpos
vearth=earthvel
vrocket=earthvel+v
vjupiter=jupitervel
pearth=Mearth*vearth
pjupiter=Mjupiter*vjupiter
procket=Mrocket*vrocket

#booleans
rocketLaunched=False
run = False
justNowLaunched=False

# pause and then change the message
scene.waitfor('click')
launchstr="Launch Day "+launchday
launchlabel.text=launchstr

Arrival = False

while Arrival == False:
        rate(1000)

#########  Add code here
        
        r = earth.pos - sun.pos #vector in direction of sun from earth
        magr = mag(r) #magnitude of that vector (earth-sun distance)
        runit=norm(r) #direction of that vector
        Fearth = G * Mearth * Msun/(magr)**2 * runit #gravitational force on earth
        vearth = vearth - Fearth/Mearth * dt #earth's new velocity
        earth.pos = earth.pos + vearth * dt #earth's new position

        #mars
        rj = jupiter.pos - sun.pos #vector in direction of sun from mars
        magrj = mag(rj) #distance from mars to sun
        rjunit=norm(rj) #direction to sun from mars
        Fjupiter = G * Mjupiter * Msun/(magrj)**2 * rjunit #gravitational force on mars
        vjupiter = vjupiter - Fjupiter/Mjupiter * dt #mars' new velocity
        jupiter.pos = jupiter.pos + vjupiter * dt #mars' new position

        
       

##########

# launched, then compute Fnet, procket, and rocket.pos
        
        if(rocketLaunched):
            rocketarrow1.visible=False

#########  Add code here            

            rocket.pos=rocket.pos+vrocket*dt #calculates new position of the rocket once the launch has occurred
            vrocket=vrocket-(dt*(((G*Msun)/ (mag(rocket.pos)**3))*rocket.pos)+((G*Mjupiter)/ (mag(rocket.pos-jupiter.pos)**3))*(rocket.pos-jupiter.pos)+(((G*Mearth)/(mag(rocket.pos-earth.pos)**3))*(rocket.pos-earth.pos))) #Calculates new velocity of the rocket using the forces of gravity on the rocket from all 3 bodies

#########

            if(justNowLaunched):
                justNowLaunched=False
        #if not launched, just make the rocket at earth's position + its initial distance in the direction of its velocity
        else:
            rocket.pos=earth.pos+rinitial*norm(v) #moves the rocket around with earth while not launched
        
        #rocketarrow
        rocketarrow1.pos=rocket.pos

        #update time and label
        t=t+dt
        tstr="Time: {:.0f} days".format(t/day)
        tlabel.text=tstr

        #launch rocket on the launch day        
        if(t/day>launchday and rocketLaunched==False):
            launchRocket()
        
        #arrival at Mars
        if(mag(rocket.pos-jupiter.pos)<jupiterrocketdist):
            launchstr="Arrival at Jupiter. \nTravel time = {:.0f} days".format(day-launchday)
            launchlabel.text=launchstr
            
#Jupiter System animation
#This code and the annotation was done by Stephen Schmidt
            
#Removing the first model's objects            
            
            sun.visible = False
            earth.visible = False
            jupiter.visible = False
            rocket.visible = False
            vearth = 0 * vec(1,1,1)
            earthtrail.clear()
            jupitertrail.clear()
            rockettrail.clear()
            
            max_thrust = 645                        #Maximum thrust of the spacecraft (645 Newtons)
            new_position = rocket.pos - jupiter.pos #The clipper's position relative to Jupiter
            apoapsis = vec(0.1,0.1,0.1)             #For before the craft inserts itself into Jupiter's orbit
#Distances to each of the moons from Jupiter
#Each value is an average value and measured in meters

            io_distance = 421.7e6               
            europa_distance = 670.9e6           
            ganymede_distance = 1070.4e6        
            callisto_distance = 1882.7e6        

#Radii of the bodies, in meters

            jupiter_radius=71492
            io_radius=1821.6
            europa_radius=1560.8
            ganymede_radius=2634.1
            callisto_radius=2410.3

#Setting up Jupiter and the moons' sizes, colors, and initial positions
#Each body is scaled up by a large factor to allow them to be visible
#This setup is theoretically possible, due to the 1:2:4 resonance between the orbits of Io, Europa, and Ganymede (Callisto does not have any orbital resonances)

            jupiter = sphere(pos = vec(0,0,0), radius = 2000*jupiter_radius, color=color.orange)
            io = sphere(pos = (vec(-io_distance, 0,0)), radius = 10000*io_radius, color=color.yellow, make_trail = True)
            europa = sphere(pos = vec(europa_distance,0,0), radius = 10000*europa_radius, color=color.white, make_trail = True)
            ganymede = sphere(pos = vec(ganymede_distance,0,0), radius = 10000*ganymede_radius, color=color.cyan, make_trail = True)
            callisto = sphere(pos = vec(-callisto_distance,0,0), radius = 10000*callisto_radius, color=color.purple, make_trail = True)

#Initial velocities, in m/s

            iovel = 17334 * vec(0,1,0)
            europavel = 13740 * vec(0,-1,0)
            ganymedevel = 10880 * vec(0,-1,0)
            callistovel = 8204 * vec(0,1,0)

#Masses of each body, in kg
#Used later for gravitational force calculations

            jupiter.mass = 1.898e27
            io.mass = 8.931e22
            europa.mass = 4.799e22
            ganymede.mass = 1.4819e23
            callisto.mass = 1.0759e23

#Setting a specific area of view

            scene.range=0.75*mag(new_position)

#Setting up the clipper's position, velocity, and mass

            clipper = sphere(pos = new_position, radius = 4000*io_radius, color=color.red, make_trail = True) #The clipper is where it was in the first animation, but relative to only Jupiter now
            clippervel = vrocket-vjupiter #makes velocity relative to jupiter
            clipper.mass = 2616

#Time increment, frame rate, and counters

            dt = 10
            thrust_counter = 0      #For the Jupiter orbital insertion maneuver
            thrust_counter_2 = 0    #For the Europa flyby maneuver
            framerate = 20000
            t = 0

#Iteration

            while t < 100000000:
                    rate(framerate)

#Calculation of the gravitational forces and motion
#The same process is used for each of the 4 moons

# IO

                    ri = io.pos - jupiter.pos                                       #Vector in the direction of Jupiter from Io
                    magri = mag(ri)                                                 #Distance between Io and Jupiter
                    riunit=norm(ri)                                                 #Direction towards Jupiter from Io
                    Fio = G * io.mass * jupiter.mass/(magri)**2 * riunit            #Gravitational force on Io by Jupiter
                    iovel = iovel - Fio/io.mass * dt                                #New velocity of io
                    io.pos = io.pos + iovel * dt                                    #New position of Io
        
# EUROPA        
        
                    re = europa.pos - jupiter.pos 
                    magre = mag(re)
                    reunit=norm(re) 
                    Feuropa = G * europa.mass * jupiter.mass/(magre)**2 * reunit 
                    europavel = europavel - Feuropa/europa.mass * dt 
                    europa.pos = europa.pos + europavel * dt 
        
# GANYMEDE        
        
                    rg = ganymede.pos - jupiter.pos 
                    magrg = mag(rg)
                    rgunit=norm(rg) 
                    Fganymede = G * ganymede.mass * jupiter.mass/(magrg)**2 * rgunit 
                    ganymedevel = ganymedevel - Fganymede/ganymede.mass * dt 
                    ganymede.pos = ganymede.pos + ganymedevel * dt 
        
# CALLISTO        
        
                    rc = callisto.pos - jupiter.pos 
                    magrc = mag(rc)
                    rcunit=norm(rc) 
                    Fcallisto = G * callisto.mass * jupiter.mass/(magrc)**2 * rcunit 
                    callistovel = callistovel - Fcallisto/callisto.mass * dt 
                    callisto.pos = callisto.pos + callistovel * dt 
        
#CLIPPER

#The clipper has to take into account gravitational forces from all of the moons as well as Jupiter
        
#Force by Jupiter

                    rclip = clipper.pos - jupiter.pos
                    magrclip = mag(rclip)
                    rclipunit = norm(rclip)

                    Fclipper = G * clipper.mass * jupiter.mass / (magrclip)**2 * rclipunit
        
#Force by Io

                    rci = clipper.pos - io.pos
                    magrci = mag(rci)
                    rciunit = norm(rci)
        
                    Fci = G * clipper.mass * io.mass / (magrci)**2 * rciunit
        
#Force by Europa        

                    rce = clipper.pos - europa.pos
                    magrce = mag(rce)
                    rceunit = norm(rce)
        
                    Fce = G * clipper.mass * europa.mass / (magrce)**2 * rceunit
             
#Force by Ganymede         
         
                    rcg = clipper.pos - ganymede.pos
                    magrcg = mag(rcg)
                    rcgunit = norm(rcg)
        
                    Fcg = G * clipper.mass * ganymede.mass / (magrcg)**2 * rcgunit
        
#Force by Callisto        
        
                    rcc = clipper.pos - callisto.pos
                    magrcc = mag(rcc)
                    rccunit = norm(rcc)
        
                    Fcc = G * clipper.mass * callisto.mass / (magrcc)**2 * rccunit
        
#Maneuvers to adjust the orbit of the spacecraft
#Maneuver 1: Jupiter orbital insertion
#The craft needs to slow down to reach a stable orbit, so in this case it will burn its thruster when it reaches Jupiter

                    if magrclip < callisto_distance:                              #This ensures the engine fires right when the clipper is in range of Jupiter           
                        if thrust_counter < 3000:
                            if thrust_counter == 1:
                                apoapsis = clipper.pos - jupiter.pos
                            Fthruster = -max_thrust/1.01 * norm(clippervel) #The engine is not always efficient enough to go at full capacity all the time
                            thrust_counter += 1
                        else:
                            Fthruster = 0 * norm(clippervel)
                    else:
                        Fthruster = 0 * norm(clippervel)
            
#Maneuver 2: Europa flyby adjustment
#The craft will slightly change its orbit in order to reach an orbit where it will be able to fly by Europa
#It needs to loop away from Jupiter so its magnetosphere and radiation belts don't interfere with transmission of data
            
                    if mag(clipper.pos - jupiter.pos) > mag(apoapsis) - 200 and t > 1000000: #This makes sure the clipper has orbited jupiter once before the maneuver
                        if thrust_counter_2 < 700:
                            Fthruster = max_thrust/2.48 * norm(-clippervel)
                            thrust_counter_2 += 1

#Calculation of the net force and the new velocity/position of the clipper

                    Fnet = Fclipper + Fci + Fce + Fcg + Fcc - Fthruster
        
                    clippervel = clippervel - Fnet/clipper.mass * dt
                    clipper.pos = clipper.pos + clippervel * dt
        
                    t += dt
