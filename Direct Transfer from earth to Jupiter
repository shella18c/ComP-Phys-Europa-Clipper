launchday=0 #day to launch
rinitial=5.6*6.4e6 #initial distance of rocket from center of earth
jupiterrocketdist=800*6.8e6 #distance from jupiter considered a success
vinitial=10282 #initial speed of rocket
v = vinitial*norm(vec(10,-2.1, 0)) #initial velocity of rocket; change the direction only

#pos unit is m
#time unit is s

#pos and vel generated by http://ssd.jpl.nasa.gov/horizons.cgi
#Aug 29, 2015

#no z components
jupiterpos=1000*vec(7.357256663719058E+08,-9.161692103096136E+07,0)
jupitervel=1000*vec(1.461982812165990E+00, 1.357692743663952E+01,0)
earthpos=1000*vec(-4.550329342378698E+07,-1.448850655854686E+08,0)
earthvel=1000*vec(2.802163872447318E+01,-8.791532175384726E+00,0)

#constants
AU=1000*149597871 #AU in m
G=6.67384e-11     #gravitational constant

#diameters used for drawing sun, jupiter, and earth; diameters are not to scale
Dsun=0.2*AU
Dearth=0.1*AU
Djupiter=0.1*AU

#masses
Msun=1.989e30
Mearth=5.97219e24
Mjupiter=6.4185e23
Mrocket=1e4

#time
day=24*3600
dt=2*3600
t=0

#set up 3D scene
scene = display(width=430, height=400, userspin=False, userzoom=True)
scene.append_to_title("""<br>Click the simulation to begin.""")
scene.append_to_title("""<br><br>Assumptions include:""")
scene.append_to_title("""<br>1. The rocket's speed near Earth's surface is 12 km/s, relative to Earth.""")
scene.append_to_title("""<br>2. The velocity of the rocket at an altitude of 2 earth radii is 5 km/s in the direction shown by the arrow.""")
scene.append_to_title("""<br>3. The thrusters are off during the entire flight. The net force on the rocket is the gravitational force by the Sun, Earth, and jupiter.<br><br>""")

#scales for arrows
scale1=Dsun

# set up 3D objects

sun=sphere(dispay=scene, pos=vec(0,0,0), radius=Dsun/2, color=color.yellow)

jupiter=sphere(dispay=scene, pos=jupiterpos, radius=Djupiter/2, color=color.red)
earth=sphere(dispay=scene, pos=earthpos, radius=Dearth/2, color=color.blue)
rocket=sphere( pos=earth.pos+rinitial*norm(v), radius=earth.radius/2, color=color.orange)
rocketarrow1=arrow(dispay=scene, pos=earth.pos, axis=scale1*norm(v), color=color.white)

# create trails
jupitertrail=attach_trail(jupiter, radius=0.2*Djupiter, trail_type="points", interval=2, retain=1000)
earthtrail=attach_trail(earth, radius=0.2*Dearth, trail_type="points", interval=2, retain=1000)
rockettrail=attach_trail(rocket, radius=0.2*rocket.radius, trail_type="points", interval=2, retain=1000)
rockettrail.stop

#create strings and labels
tstr="Time: {:.0f} days".format(0)
tlabel=label(pos=vector(0,1.2*mag(jupiterpos),0), text=tstr)
launchstr="Starting Date: November 24, 2021. \n"+launchday+" days until launch. \n Click to Run."
launchlabel=label(pos=vector(0,-1.2*mag(jupiterpos),0), text=launchstr)

#set the range
scene.range=1.5*mag(jupiterpos)

#this function is called when the rocket is launched
# it sets booleans and sets the initial velocitiy and momentum of the rocket
def launchRocket():
    global vrocket, procket, rocketLaunched, justNowLaunched
    rocketLaunched=True
    justNowLaunched=True
    vrocket=vearth+v
    procket=Mrocket*vrocket

# initial positions, velocities, and momenta of all objects
earth.pos=earthpos
rocket.pos=earthpos
jupiter.pos=jupiterpos
vearth=earthvel
vrocket=earthvel+v
vjupiter=jupitervel

#booleans
rocketLaunched=False
run = False
justNowLaunched=False

# pause and then change the message
scene.waitfor('click')
launchstr="Launch Day "+launchday
launchlabel.text=launchstr


while True:
        rate(1400)

#########  Add code here
        #Changing earth position and it's velocity based on gravity
        earth.pos=earth.pos+vearth*dt
        vearth=vearth-(dt*((G*Msun)/(mag(earth.pos)**3))*earth.pos)
        #Changing jupiter position and it's velocity based on gravity
        jupiter.pos=jupiter.pos+vjupiter*dt
        vjupiter=vjupiter-(dt*G*Msun)/(mag(jupiter.pos)**3)*jupiter.pos
        
       

##########

# launched, then compute Fnet, procket, and rocket.pos
        
        if(rocketLaunched):
            rocketarrow1.visible=False

#########  Add code here            
            #Changing the rocket position and it's velocity based on the gravitational forces it experiances from earth jupiter and the sun
            rocket.pos=rocket.pos+vrocket*dt
            vrocket=vrocket-(dt*(((G*Msun)/(mag(rocket.pos)**3))*rocket.pos)+((G*Mjupiter)/(mag(rocket.pos-jupiter.pos)**3))*(rocket.pos-jupiter.pos)+(((G*Mearth)/(mag(rocket.pos-earth.pos)**3))*(rocket.pos-earth.pos)))

#########

            if(justNowLaunched):
                justNowLaunched=False
        #if not launched, just make the rocket at earth's position + its initial distance in the direction of its velocity
        else:
            rocket.pos=earth.pos+rinitial*norm(v)
        
        #rocketarrow
        rocketarrow1.pos=rocket.pos

        #update time and label
        t=t+dt
        tstr="Time: {:.0f} days".format(t/day)
        tlabel.text=tstr

        #launch rocket on the launch day        
        if(t/day>launchday and rocketLaunched==False):
            launchRocket()
        
        #arrival at jupiter
        if(mag(rocket.pos-jupiter.pos)<jupiterrocketdist):
            launchstr="Arrival at Jupiter. \nTravel time = {:.0f} days".format(t/day-launchday)
            launchlabel.text=launchstr
            scene.waitfor('click')
